#!/usr/bin/env python3
"""
Merge domain/subcategory/source into the build CSVs using item_id.
Writes *_with_domain.csv next to the originals.
Also prints match stats.
"""

from pathlib import Path
import pandas as pd

ROOT  = Path("/data/abar808/mllm-diagram-exp")
BUILD = ROOT / "data" / "build"
META  = BUILD / "metadata_domains.csv"   # generated by export_domains.py

INPUTS = [
    BUILD / "master_original.csv",
    BUILD / "masked.csv",
    BUILD / "contradictory.csv",
]

def main():
    md = pd.read_csv(META)
    if "item_id" not in md.columns:
        raise SystemExit("metadata_domains.csv must have an 'item_id' column.")
    # de-dup (keep first)
    md = md.drop_duplicates(subset=["item_id"], keep="first")

    for inp in INPUTS:
        if not inp.exists():
            print(f"[WARN] missing {inp}, skipping")
            continue
        df = pd.read_csv(inp)

        if "item_id" not in df.columns:
            raise SystemExit(f"{inp} has no 'item_id' column; cannot merge.")

        merged = df.merge(md, on="item_id", how="left")

        # Basic match stats
        matched = merged["domain"].notna().sum()
        total   = len(merged)
        print(f"[OK] {inp.name}: matched {matched}/{total} ({matched/total:.1%})")

        outp = inp.with_name(inp.stem + "_with_domain.csv")
        merged.to_csv(outp, index=False)
        print(f"[OK] wrote {outp}")

if __name__ == "__main__":
    main()
